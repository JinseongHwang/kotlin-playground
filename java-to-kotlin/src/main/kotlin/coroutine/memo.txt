코루틴을 사용해서 제어범위와 실행범위를 지정할 수 있다.
이를 Scope 라고 하는데, 2가지 종류를 제공해준다.
1. GlobalScope : 프로그램의 어디서나 제어, 동작이 가능한 기본 범위
2. CoroutineScope : 특정한 목적의 Dispatcher를 지정하여 제어 및 동작이 가능한 범위
GlobalScope은 CoroutineScope 인터페이스를 구현한 구현체이다.

Coroutine의 Dispatcher는?
- Dispatchers.Default : 기본적인 백그라운드 동작
- Dispatchers.IO : I/O에 최적화된 동작
- Dispatchers.Main : 메인 스레드에서 동작(안드로이드에서 UI)

생성된 Scope 에 따라서 launch() 또는 await() 로 코루틴을 생성할 수 있다.
- launch() : 반환값 없음 (Job 객체 반환, 결과값 없음)
  - Job의 실행이 끝날때까지 대기하는 함수
- await() : 반환값 있음 (Deffered 객체 반환, 결과값 있음)
  - Deffered의 실행이 끝날때까지 대기하는 함수
공통점으로는 두 함수 모두 람다 함수를 인자로 받아서 코루틴 블럭의 동작을 정의한다.

delay()를 사용하면 진행중인 루틴을 millesec 단위로 잠시 대기시킬 수 있다.

launch, async, delay 등의 함수들은 코루틴 내부 or runBlocking 과 같은 루틴 대기 가능한 블럭 안에서만 호출할 수 있다.
-> 이게 어떻게 가능? 어떻게 구현될까?

cancel()을 사용하면 다음 2가지 조건이 발생하며 코루틴 동작을 중단할 수 있다.
1. 코루틴 내부의 delay() 또는 yield() 가 사용된 위치까지 수행된 뒤 종료됨.
2. cancel()로 인해 속성인 isActive 가 false가 되므로 이를 확인하여 수동으로 종료함.

withTimeoutOrNull() 를 사용하면 제한시간 내 동작이 수행될 경우 결과값을 반환하고, 끝내지 못하면 null 을 반환한다.
withTimeoutOrNull() 또한 join, await 처럼 blocking 함수이다.